{"version":3,"file":"index.umd.js","sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/useFormState.ts","../src/useController.ts","../src/logic/getControllerValue.ts","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFieldsValues.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/deepMerge.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/isString.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/getFields.ts","../src/utils/isFileInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/hasValidation.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/utils/Subject.ts","../src/useForm.ts","../src/controller.tsx","../src/useFieldArray.ts","../src/logic/skipValidation.ts","../src/utils/isRadioOrCheckbox.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, formStateSubjectRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    fieldArrayNamesRef,\n    controllerSubjectRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const { onChange, onBlur, ref } = register(name, rules);\n  const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    isUndefined(get(fieldsRef.current, name)._f.value) || isFieldArray\n      ? isUndefined(defaultValue)\n        ? get(defaultValuesRef.current, name)\n        : defaultValue\n      : get(fieldsRef.current, name)._f.value,\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const field = get(fieldsRef.current, name);\n  field._f.value = value;\n\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isFieldArray\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else if (get(fieldsRef.current, name)) {\n        get(fieldsRef.current, name)._f.mount = false;\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: Object.defineProperties(\n      {},\n      {\n        invalid: {\n          get() {\n            return !!get(formState.errors, name);\n          },\n        },\n        isDirty: {\n          get() {\n            return !!get(formState.dirtyFields, name);\n          },\n        },\n        isTouched: {\n          get() {\n            return !!get(formState.touchedFields, name);\n          },\n        },\n        error: {\n          get() {\n            return get(formState.errors, name);\n          },\n        },\n      },\n    ),\n  };\n}\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        !_f &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...data];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  options &&\n  mounted &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldErrors,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  FormStateSubjectRef,\n  GetIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef<FormStateSubjectRef<TFieldValues>>(\n    new Subject(),\n  );\n  const unregisterFieldsNamesRef = React.useRef<Set<InternalFieldName>>(\n    new Set(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      formValues: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const inFieldArrayActionRef = React.useRef(false);\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () => {\n    formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n\n    return formStateRef.current.isValid;\n  };\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        (get(fieldsWithValidationRef.current, name) || resolverRef.current) &&\n          set(validFieldsRef.current, name, true);\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldRender ||\n          isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(state) ||\n          (readFormStateRef.current.isValid &&\n            formStateRef.current.isValid !==\n              (resolverRef.current ? !!isValid : getIsValid()))) &&\n        !isNullOrUndefined(shouldRender)\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(\n          isWatched ? { name } : updatedFormState,\n        );\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            controllerSubjectRef.current.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          options.shouldDirty && updateAndGetDirtyState(name, value);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n          name,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    let isValid = true;\n\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            isValid = false;\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n\n    return isValid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : (convertToArrayPayload(name) as InternalFieldName[]);\n      let isValid;\n      let schemaResult: FieldErrors<TFieldValues> | {} = {};\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        schemaResult = await executeSchemaOrResolverValidation(\n          fields,\n          isUndefined(name) ? undefined : (fields as FieldName<TFieldValues>[]),\n        );\n        isValid = fields.every((name) => !get(schemaResult, name));\n      } else {\n        isValid = isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : (\n              await Promise.all(\n                fields\n                  .filter((fieldName) => get(fieldsRef.current, fieldName))\n                  .map(\n                    async (fieldName) =>\n                      await executeValidation(fieldName, null),\n                  ),\n              )\n            ).every(Boolean);\n      }\n\n      formStateSubjectRef.current.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current\n          ? isEmptyObject(schemaResult)\n          : getIsValid(),\n      });\n\n      return isValid;\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n        isFieldArray || !isPrimitive(inputValue) || (field && !field._f)\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    ref?: Ref,\n    isWithinRefCallback?: boolean,\n  ) => {\n    const field = get(fieldsRef.current, name) as Field;\n    const defaultValue = isUndefined(field._f.value)\n      ? get(defaultValuesRef.current, name)\n      : field._f.value;\n\n    if (field && !isUndefined(defaultValue)) {\n      if (ref && (ref as HTMLInputElement).defaultChecked) {\n        field._f.value = getFieldValue(field);\n      } else if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        setFieldValue(name, defaultValue);\n      } else {\n        field._f.value = defaultValue;\n      }\n    }\n\n    if (\n      (!isUndefined(defaultValue) || isWithinRefCallback) &&\n      hasValidation(options, field._f.mount) &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid !== getIsValid() &&\n          updateFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, formValues: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolverRef.current &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              formValues: getValues(),\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(\n              isWatched ? { name } : { ...state, name },\n            )\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            formValues: getValues(),\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(fieldsRef),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && watchFieldsRef.current.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n          formValues: getValues(),\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) ||\n      (isRadioOrCheckbox &&\n        Array.isArray(field._f.refs) &&\n        compact(field._f.refs).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    const defaultValue = updateValidAndValue(name, options, ref, true);\n\n    if (\n      isRadioOrCheckbox && Array.isArray(defaultValue)\n        ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n        : isUndefined(get(fieldsRef.current, name)._f.value)\n    ) {\n      get(fieldsRef.current, name)._f.value = getFieldValue(\n        get(fieldsRef.current, name),\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref || {},\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      hasValidation(options, true) &&\n        set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      isInitialRegister && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name) as Field;\n                const shouldUnmount =\n                  shouldUnregister || (options && options.shouldUnregister);\n                field && (field._f.mount = false);\n\n                if (\n                  isWeb &&\n                  (isNameInFieldArray(fieldArrayNamesRef.current, name)\n                    ? shouldUnmount && !inFieldArrayActionRef.current\n                    : shouldUnmount)\n                ) {\n                  unregisterFieldsNamesRef.current.add(name);\n                }\n              }\n            },\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } catch {\n        hasNoPromiseError = false;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    (\n      {\n        keepErrors,\n        keepDirty,\n        keepIsSubmitted,\n        keepTouched,\n        keepDefaultValues,\n        keepIsValid,\n        keepSubmitCount,\n      }: KeepStateOptions,\n      values?: DefaultValues<TFieldValues>,\n    ) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty\n          ? formStateRef.current.isDirty\n          : keepDefaultValues\n          ? deepEqual(values, defaultValuesRef.current)\n          : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !!updateIsValid(values),\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    value: T,\n    name = '',\n  ): void => {\n    const field = get(fieldsRef.current, name);\n\n    if (!field || (field && !field._f)) {\n      if (\n        !field &&\n        (isPrimitive(value) ||\n          (isWeb && (value instanceof FileList || value instanceof Date)))\n      ) {\n        set(fieldsRef.current, name, {\n          _f: {\n            ref: { name, value },\n            value,\n            name,\n          },\n        });\n      }\n\n      if (Array.isArray(value) || isObject(value)) {\n        if (name && !get(fieldsRef.current, name)) {\n          set(fieldsRef.current, name, Array.isArray(value) ? [] : {});\n        }\n\n        for (const key in value) {\n          registerAbsentFields(value[key], name + (name ? '.' : '') + key);\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of fieldsNamesRef.current) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        formValues: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      registerAbsentFields({ ...updatedValues });\n\n    resetFromState(keepStateOptions, values);\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    registerAbsentFields(defaultValuesRef.current);\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    isMountedRef.current = true;\n\n    for (const name of unregisterFieldsNamesRef.current) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    unregisterFieldsNamesRef.current = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        inFieldArrayActionRef,\n        watchFieldsRef,\n        getIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n  shouldUnregister,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    isWatchAllRef,\n    watchFieldsRef,\n    getIsDirty,\n    watchSubjectRef,\n    fieldArraySubjectRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      get(fieldsRef.current, name) && isMountedRef.current\n        ? get(getFieldsValues(fieldsRef), name)\n        : get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name, [])\n        : get(defaultValuesRef.current, name, []),\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  fieldArrayNamesRef.current.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    fields: T,\n  ) =>\n    fields.map((field) =>\n      omit((field || {}) as Record<TKeyName, any>, keyName),\n    );\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusDetail = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options\n      ? !isUndefined(options.focusIndex)\n        ? `${name}.${options.focusIndex}`\n        : options.focusName\n        ? options.focusName\n        : !options.shouldFocus\n        ? ''\n        : `${name}.${index}`\n      : `${name}.${index}`;\n\n  const resetFields = <T>(index?: T) =>\n    convertToArrayPayload(index).forEach((currentIndex) =>\n      set(\n        fieldsRef.current,\n        `${name}${isUndefined(currentIndex) ? '' : `.${currentIndex}`}`,\n        isUndefined(currentIndex) ? [] : undefined,\n      ),\n    );\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    updatedFieldArrayValues?: T,\n  ) =>\n    updatedFieldArrayValues &&\n    set(\n      formStateRef.current.dirtyFields,\n      name,\n      setFieldArrayDirtyFields(\n        omitKey(updatedFieldArrayValues),\n        get(defaultValuesRef.current, name, []),\n        get(formStateRef.current.dirtyFields, name, []),\n      ),\n    );\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (readFormStateRef.current.isValid) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    formStateSubjectRef.current.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach(\n      (appendValueItem, valueIndex) =>\n        !isPrimitive(appendValueItem) &&\n        Object.entries(appendValueItem).forEach(([key, value]) => {\n          const inputName = `${parentName || name}.${\n            parentName ? valueIndex : index + valueIndex\n          }.${key}`;\n\n          Array.isArray(value)\n            ? registerFieldArray(value, valueIndex, inputName)\n            : set(fieldsRef.current, inputName, {\n                _f: {\n                  ref: {\n                    name: inputName,\n                  },\n                  name: inputName,\n                  value: isPrimitive(value) ? value : { ...value },\n                },\n              });\n        }),\n    );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusDetail(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusDetail(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n    resetFields(index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusDetail(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (isWatchAllRef.current) {\n      formStateSubjectRef.current.next({});\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (name.startsWith(watchField)) {\n          formStateSubjectRef.current.next({});\n          break;\n        }\n      }\n    }\n\n    watchSubjectRef.current.next({\n      name,\n      formValues: getFieldsValues(fieldsRef),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(\n        fieldsRef.current,\n        (key: string) => isString(key) && key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    fieldArraySubjectRef.current.next({\n      name,\n      fields: omitKey([...fields]),\n    });\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next({ name: inputFieldArrayName, fields, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                fields,\n              )\n            : (fieldArrayDefaultValuesRef.current = fields);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      (shouldUnmount || shouldUnregister) && unregister(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, watchSubjectRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = watchSubjectRef.current.subscribe({\n      next: ({ name: inputName, formValues }) =>\n        (!nameRef.current ||\n          !inputName ||\n          convertToArrayPayload(nameRef.current).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          watchInternal(\n            nameRef.current as string,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            false,\n            formValues,\n          ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"],"names":["element","type","value","isObjectType","isNullOrUndefined","Array","isArray","Date","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","React","createContext","displayName","useFormContext","useContext","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","Object","keys","length","formStateData","omit","isEmptyObject","find","window","HTMLElement","document","isWeb","useFormState","props","control","methods","formStateRef","formStateSubjectRef","nameRef","useRef","updateFormState","useState","readFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","subscribe","next","convertToArrayPayload","includes","shouldRenderFormState","unsubscribe","getProxyFormState","useController","rules","shouldUnregister","defaultValuesRef","register","fieldsRef","unregister","fieldArrayNamesRef","controllerSubjectRef","shouldUnmount","inFieldArrayActionRef","onChange","onBlur","ref","isFieldArray","isNameInFieldArray","setInputStateValue","_f","controllerSubscription","data","values","shouldUnmountField","mount","field","event","target","isCheckBoxInput","checked","getControllerValue","elm","fieldState","defineProperties","invalid","isTouched","error","validateAllFieldCriteria","message","types","[object Object]","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","focus","refs","getFieldsValues","output","disabled","every","d","performance","now","c","r","Math","random","toString","keyName","map","generateId","deepEqual","object1","object2","isErrorObject","isPrimitive","isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","parentNode","parentName","deepMerge","targetValue","sourceValue","slice","append","fill","insert","from","to","splice","prepend","indexes","i","temp","removeAtIndexes","sort","a","b","indexA","indexB","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","getFields","fieldsRefs","currentFields","defaultResult","validResult","options","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","mounted","required","min","max","maxLength","minLength","pattern","validate","isString","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","isFunction","validateError","validationResult","validateFunction","entries","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","Subscription","this","tearDown","tearDowns","push","teardown","Subscriber","observer","subscription","add","closed","Subject","observers","subscriber","isWindowUndefined","render","Provider","children","focusNameRef","isMountedRef","isWatchAllRef","watchFieldsRef","getIsDirty","watchSubjectRef","fieldArraySubjectRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","setFields","mapIds","getFieldArrayParentName","omitKey","getCurrentFieldsValues","getFocusDetail","focusIndex","focusName","shouldFocus","setFieldsAndNotify","fieldsValues","cleanup","batchStateUpdate","method","args","updatedFieldArrayValues","shouldSet","argA","argB","setFieldArrayDirtyFields","updateDirtyFieldsWithDefaultValues","registerFieldArray","forEach","appendValueItem","valueIndex","inputName","watchField","startsWith","formValues","fieldArraySubscription","inputFieldArrayName","isReset","swap","useCallback","fieldValues","swapArrayAt","move","moveArrayAt","prependValue","prependAt","fillEmptyArray","appendValue","appendAt","currentIndex","remove","removeArrayAt","resetFields","insertValue","insertAt","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldsNamesRef","Set","unregisterFieldsNamesRef","contextRef","resolverRef","validationMode","getValidationModes","isValidateAllFieldCriteria","isSubmitted","submitCount","isSubmitting","isSubmitSuccessful","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","previousError","updatedFormState","setFieldValue","rawValue","shouldRegister","isHTMLElement","radioRef","selectRef","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","currentNames","validateForm","fieldError","schemaResult","Promise","all","fieldName","setInternalValues","inputKey","has","isFieldWatched","updateValidAndValue","isWithinRefCallback","defaultChecked","hasValidation","then","handleChange","inputType","isBlurEvent","isReValidateOnBlur","isReValidateOnChange","shouldSkipValidation","skipValidation","getValues","previousFormIsValid","parentNodeName","currentError","fieldNames","updateIsValid","previousIsValid","watchInternal","isGlobal","isArrayNames","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","registerFieldRef","isRadioOrCheckboxFunction","contains","isInitialRegister","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetFromState","keepErrors","keepIsSubmitted","keepDefaultValues","keepSubmitCount","registerAbsentFields","FileList","useFieldArraySubscription","isLiveInDom","useMemo","watch","info","setValue","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","clearErrors","setError","setFocus","updateValue","watchSubscription"],"mappings":"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"}