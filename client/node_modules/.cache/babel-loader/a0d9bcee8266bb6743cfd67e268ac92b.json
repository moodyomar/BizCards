{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { API_URL, doApiMethod } from \"./apiSer\";\nlet user = {};\nexport const getUserDataFromApi = async () => {\n  try {\n    let url = API_URL + \"/users/userInfo\";\n    let data = await doApiMethod(url, \"GET\");\n    console.log(data);\n    user = data;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const updateUserData = async () => {\n  if (localStorage[\"tok\"]) {\n    // if there is token we pull the user data,\n    // if not / token invalid we send him to login pg\n    let url = API_URL + \"/users/userInfo\";\n\n    try {\n      let data = await doApiMethod(url, \"GET\"); // data = resp.data which returned from doApiMethod func\n\n      if (data._id) {\n        // if there is an id which mean data recived\n        // we assinged it to user object\n        user = data;\n      } else {\n        // otherwise we remove the token and return emptey user\n        localStorage.removeItem(\"tok\");\n        user = {};\n      }\n\n      return user;\n    } catch (err) {\n      localStorage.removeItem(\"tok\");\n      user = {};\n      return user;\n    }\n  } else {\n    user = {};\n    return user;\n  }\n};\nexport const getUserData = () => {\n  return user;\n}; // function the will update the cards array of user when the user make a card favorite\n\nexport const updateUserAddFavCards = async _bizCardNumber => {\n  //  making sure that there is no duplicates in array\n  let temp_ar = [...user.cards, _bizCardNumber]; // Set -> making an object the maing sure there is no duplicates\n\n  temp_ar = new Set([...temp_ar]);\n  user.cards.splice(0, user.cards.length, ...temp_ar);\n  let url = API_URL + \"/users/cards\";\n\n  try {\n    let data = await doApiMethod(url, \"PATCH\", {\n      cards: user.cards\n    }); // if there is a success ill recive n=1 just like in postman\n\n    if (data.n == 1) {\n      toast.success(\"Card is added to favorite\");\n    }\n\n    return data;\n  } catch (err) {\n    console.log(err);\n    toast.error(\"an error accured , try again later !\");\n    throw err;\n  }\n}; // removing a card from favorite\n\nexport const removeUserFavCard = async _bizCardNumber => {\n  // return to temp_ar all the cards beside the one i want to remove\n  let temp_ar = user.cards.filter(item => item != _bizCardNumber);\n  user.cards.splice(0, user.cards.length, ...temp_ar);\n  let url = API_URL + \"/users/cards\";\n\n  try {\n    let data = await doApiMethod(url, \"PATCH\", {\n      cards: user.cards\n    }); // if there is a success ill recive n=1 just like in postman\n\n    if (data.n == 1) {\n      toast.warning(\"Card removed from favorite\");\n    }\n\n    return data;\n  } catch (err) {\n    console.log(err);\n    toast.error(\"There problem , try again later !\");\n    throw err;\n  }\n};","map":{"version":3,"sources":["/Users/hamudi/Documents/Learning/Mini Projects/BizCards/macard/client/src/services/userSer.js"],"names":["toast","API_URL","doApiMethod","user","getUserDataFromApi","url","data","console","log","err","updateUserData","localStorage","_id","removeItem","getUserData","updateUserAddFavCards","_bizCardNumber","temp_ar","cards","Set","splice","length","n","success","error","removeUserFavCard","filter","item","warning"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,UAArC;AAEA,IAAIC,IAAI,GAAG,EAAX;AAEA,OAAO,MAAMC,kBAAkB,GAAG,YAAY;AAC5C,MAAI;AACF,QAAIC,GAAG,GAAGJ,OAAO,GAAG,iBAApB;AACA,QAAIK,IAAI,GAAG,MAAMJ,WAAW,CAACG,GAAD,EAAM,KAAN,CAA5B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAH,IAAAA,IAAI,GAAGG,IAAP;AACD,GALD,CAMA,OAAOG,GAAP,EAAY;AACVF,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AAED;AACF,CAXM;AAaP,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,MAAIC,YAAY,CAAC,KAAD,CAAhB,EAAyB;AACvB;AACA;AACA,QAAIN,GAAG,GAAGJ,OAAO,GAAG,iBAApB;;AACA,QAAI;AACF,UAAIK,IAAI,GAAG,MAAMJ,WAAW,CAACG,GAAD,EAAM,KAAN,CAA5B,CADE,CAEF;;AACA,UAAIC,IAAI,CAACM,GAAT,EAAc;AACZ;AACA;AACAT,QAAAA,IAAI,GAAGG,IAAP;AACD,OAJD,MAKK;AACH;AACAK,QAAAA,YAAY,CAACE,UAAb,CAAwB,KAAxB;AACAV,QAAAA,IAAI,GAAG,EAAP;AACD;;AACD,aAAOA,IAAP;AACD,KAdD,CAeA,OAAOM,GAAP,EAAY;AACVE,MAAAA,YAAY,CAACE,UAAb,CAAwB,KAAxB;AACAV,MAAAA,IAAI,GAAG,EAAP;AACA,aAAOA,IAAP;AACD;AACF,GAxBD,MAyBK;AACHA,IAAAA,IAAI,GAAG,EAAP;AACA,WAAOA,IAAP;AACD;AACF,CA9BM;AAiCP,OAAO,MAAMW,WAAW,GAAG,MAAM;AAC/B,SAAOX,IAAP;AACD,CAFM,C,CAKP;;AACA,OAAO,MAAMY,qBAAqB,GAAG,MAAOC,cAAP,IAA0B;AAC7D;AAEA,MAAIC,OAAO,GAAG,CAAC,GAAGd,IAAI,CAACe,KAAT,EAAgBF,cAAhB,CAAd,CAH6D,CAI7D;;AACAC,EAAAA,OAAO,GAAG,IAAIE,GAAJ,CAAQ,CAAC,GAAGF,OAAJ,CAAR,CAAV;AACAd,EAAAA,IAAI,CAACe,KAAL,CAAWE,MAAX,CAAkB,CAAlB,EAAqBjB,IAAI,CAACe,KAAL,CAAWG,MAAhC,EAAwC,GAAGJ,OAA3C;AAEA,MAAIZ,GAAG,GAAGJ,OAAO,GAAG,cAApB;;AACA,MAAI;AAEF,QAAIK,IAAI,GAAG,MAAMJ,WAAW,CAACG,GAAD,EAAM,OAAN,EAAe;AAAEa,MAAAA,KAAK,EAAEf,IAAI,CAACe;AAAd,KAAf,CAA5B,CAFE,CAGF;;AACA,QAAIZ,IAAI,CAACgB,CAAL,IAAU,CAAd,EAAiB;AACftB,MAAAA,KAAK,CAACuB,OAAN,CAAc,2BAAd;AACD;;AACD,WAAOjB,IAAP;AACD,GARD,CASA,OAAOG,GAAP,EAAY;AACVF,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAT,IAAAA,KAAK,CAACwB,KAAN,CAAY,sCAAZ;AACA,UAAMf,GAAN;AACD;AACF,CAvBM,C,CAyBP;;AACA,OAAO,MAAMgB,iBAAiB,GAAG,MAAOT,cAAP,IAA0B;AACzD;AACA,MAAIC,OAAO,GAAGd,IAAI,CAACe,KAAL,CAAWQ,MAAX,CAAkBC,IAAI,IAAIA,IAAI,IAAIX,cAAlC,CAAd;AACAb,EAAAA,IAAI,CAACe,KAAL,CAAWE,MAAX,CAAkB,CAAlB,EAAqBjB,IAAI,CAACe,KAAL,CAAWG,MAAhC,EAAwC,GAAGJ,OAA3C;AAEA,MAAIZ,GAAG,GAAGJ,OAAO,GAAG,cAApB;;AACA,MAAI;AAEF,QAAIK,IAAI,GAAG,MAAMJ,WAAW,CAACG,GAAD,EAAM,OAAN,EAAe;AAAEa,MAAAA,KAAK,EAAEf,IAAI,CAACe;AAAd,KAAf,CAA5B,CAFE,CAGF;;AACA,QAAIZ,IAAI,CAACgB,CAAL,IAAU,CAAd,EAAiB;AACftB,MAAAA,KAAK,CAAC4B,OAAN,CAAc,4BAAd;AACD;;AACD,WAAOtB,IAAP;AACD,GARD,CASA,OAAOG,GAAP,EAAY;AACVF,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAT,IAAAA,KAAK,CAACwB,KAAN,CAAY,mCAAZ;AACA,UAAMf,GAAN;AACD;AACF,CApBM","sourcesContent":["import { toast } from \"react-toastify\";\nimport { API_URL, doApiMethod } from \"./apiSer\";\n\nlet user = {};\n\nexport const getUserDataFromApi = async () => {\n  try {\n    let url = API_URL + \"/users/userInfo\"\n    let data = await doApiMethod(url, \"GET\")\n    console.log(data);\n    user = data;\n  }\n  catch (err) {\n    console.log(err);\n\n  }\n}\n\nexport const updateUserData = async () => {\n  if (localStorage[\"tok\"]) {\n    // if there is token we pull the user data,\n    // if not / token invalid we send him to login pg\n    let url = API_URL + \"/users/userInfo\";\n    try {\n      let data = await doApiMethod(url, \"GET\");\n      // data = resp.data which returned from doApiMethod func\n      if (data._id) {\n        // if there is an id which mean data recived\n        // we assinged it to user object\n        user = data\n      }\n      else {\n        // otherwise we remove the token and return emptey user\n        localStorage.removeItem(\"tok\");\n        user = {}\n      }\n      return user\n    }\n    catch (err) {\n      localStorage.removeItem(\"tok\");\n      user = {};\n      return user\n    }\n  }\n  else {\n    user = {}\n    return user;\n  }\n}\n\n\nexport const getUserData = () => {\n  return user;\n}\n\n\n// function the will update the cards array of user when the user make a card favorite\nexport const updateUserAddFavCards = async (_bizCardNumber) => {\n  //  making sure that there is no duplicates in array\n\n  let temp_ar = [...user.cards, _bizCardNumber];\n  // Set -> making an object the maing sure there is no duplicates\n  temp_ar = new Set([...temp_ar]);\n  user.cards.splice(0, user.cards.length, ...temp_ar);\n\n  let url = API_URL + \"/users/cards\"\n  try {\n\n    let data = await doApiMethod(url, \"PATCH\", { cards: user.cards });\n    // if there is a success ill recive n=1 just like in postman\n    if (data.n == 1) {\n      toast.success(\"Card is added to favorite\")\n    }\n    return data;\n  }\n  catch (err) {\n    console.log(err)\n    toast.error(\"an error accured , try again later !\")\n    throw err\n  }\n}\n\n// removing a card from favorite\nexport const removeUserFavCard = async (_bizCardNumber) => {\n  // return to temp_ar all the cards beside the one i want to remove\n  let temp_ar = user.cards.filter(item => item != _bizCardNumber)\n  user.cards.splice(0, user.cards.length, ...temp_ar);\n\n  let url = API_URL + \"/users/cards\"\n  try {\n\n    let data = await doApiMethod(url, \"PATCH\", { cards: user.cards });\n    // if there is a success ill recive n=1 just like in postman\n    if (data.n == 1) {\n      toast.warning(\"Card removed from favorite\")\n    }\n    return data;\n  }\n  catch (err) {\n    console.log(err)\n    toast.error(\"There problem , try again later !\")\n    throw err\n  }\n}"]},"metadata":{},"sourceType":"module"}